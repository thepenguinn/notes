@document.meta
title: Simulation of Signals
description: simulation of signals ( lab, and notes )
authors: Daniel
categories: [
    lab
    notes
]
created: 2024-07-25T19:48:22+0530
updated: 2024-07-26T18:25:08+0530
version: 1.1.1
@end

* Discrete time impulse signal

  Generate and plot a discrete-time impulse

  #tangle discreteTimeImpulse.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  n = np.arange(-5, 6)
  x = np.zeros_like(n)

  x[ n == 0 ] = 1

  plt.stem(n, x)
  plt.xticks(n)

  plt.savefig("plot/discreteTimeImpulse.svg")
  @end

  {plot/discreteTimeImpulse.svg}[Plot]

* Discrete time pulse signal

  Generate a discrete-time pulse signal

  @math
  u(x) =
  \begin{cases}
  1    & \text{if} 0 \leq n \leq 4 \\
  0    & \text{otherwise}
  \end{cases}
  @end

  #tangle discreteTimePulse.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  n = np.arange(-5, 6)
  x = np.zeros_like(n)

  x[(n >= 0) & (n <= 4)] = 1

  plt.stem(n, x)
  plt.xticks(n)

  plt.savefig("plot/discreteTimePulse.svg")
  @end

  {plot/discreteTimePulse.svg}[Plot]

* Discrete time bipolar pulse signal

  Generate and stem the discrete-time bipolar pulse signal

  @math
  u(t) =
  \begin{cases}
  -1  & \text{if} -3 \leq n < 0 \\
  1   & \text{if} 0 \leq n < 3
  \end{cases}
  @end

  #tangle discreteTimeBipolar.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  n = np.arange(-5, 6)
  x = np.zeros_like(n)

  x[(n >= -3) & (n < 0)] = -1
  x[(n >= 0) & (n < 3)] = 1

  plt.stem(n, x)
  plt.xticks(n)

  plt.savefig("plot/discreteTimeBipolar.svg")
  @end

  {plot/discreteTimeBipolar.svg}[Plot]

* Discrete time ramp signal

  Generate and plot a discrete-time ramp signal

  #tangle discreteTimeRamp.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  n = np.arange(0, 11)
  x = n.copy()

  plt.stem(n, x)
  plt.xticks(n)

  plt.savefig("plot/discreteTimeRamp.svg")
  @end

  {plot/discreteTimeRamp.svg}[Plot]

* Discrete time triangluar signal

  Generate a triangluar signal

  #tangle discreteTimeTri.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  a = np.arange(6)
  b = np.arange(4, -1, -1)

  x = np.concatenate([a, b])

  plt.stem(x)
  plt.xticks(np.arange(11))

  plt.savefig("plot/discreteTimeTri.svg")
  @end

  {plot/discreteTimeTri.svg}[Plot]

* Yet another discrete time signal

  Plot the discrete-time signal $x[n] = \{2, -1, 4, 1\}$ using `plt.stem()`.
  Use `np.array` to create `x`

  #tangle yetAnotherDiscreteTimeSignal.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  x = np.array([2, -1, 4, 1])
  plt.stem(x)

  plt.savefig("yetAnotherDiscreteTimeSignal.svg")
  @end

  {yetAnotherDiscreteTimeSignal.svg}[Plot]

* Complex exponential sequence

  Generate the complex exponential sequence:

  @math
  x[n] = e^{( -\dfrac{1}{12} + j\dfrac{\pi}{6}n )}
  @end

  Display both the real and imaginary parts of the signal from $n=0$ to $n=40$
  using `plt.subplot()`

  #tangle complexExpSeq.py
  @code python
  import numpy as np
  import matplotlib.pyplot as plt

  def comp_exp_func (n):
      return np.exp( (-1 / 12) + (1j * np.pi / 6 * n) )

  t = np.arange(0, 41)
  x = comp_exp_func(t)

  plt.figure(figsize = (10, 16))

  plt.subplot(2, 1, 1)
  plt.stem(t, x.real, label = "Real part")
  plt.legend()

  plt.subplot(2, 1, 2)
  plt.stem(t, x.imag, label = "Imaginary part")
  plt.legend()

  plt.savefig("plot/complexExpSeq.svg")
  @end

  {plot/complexExpSeq.svg}[Plot]

* Yet another sequence
* Many more discrete sequences
* Discrete time sinosoids
* Continuous time signals
* Rectified sine wave
* Random signals
* More random signals
* Sine wave corrupted with noise
